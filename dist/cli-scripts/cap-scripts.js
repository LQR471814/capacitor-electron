var te=Object.create;var C=Object.defineProperty;var re=Object.getOwnPropertyDescriptor;var oe=Object.getOwnPropertyNames,D=Object.getOwnPropertySymbols,ne=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty,se=Object.prototype.propertyIsEnumerable;var E=(e,t,r)=>t in e?C(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,_=(e,t)=>{for(var r in t||(t={}))b.call(t,r)&&E(e,r,t[r]);if(D)for(var r of D(t))se.call(t,r)&&E(e,r,t[r]);return e};var ie=e=>C(e,"__esModule",{value:!0});var ce=(e,t,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of oe(t))!b.call(e,o)&&o!=="default"&&C(e,o,{get:()=>t[o],enumerable:!(r=re(t,o))||r.enumerable});return e},a=e=>ce(ie(C(e!=null?te(ne(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var v=a(require("fs")),A=a(require("fs-extra")),p=a(require("path"));var N=a(require("chalk")),R=a(require("child_process")),ae=a(require("crypto")),y=a(require("fs")),l=a(require("path")),F;(function(o){o[o.Core=0]="Core",o[o.Cordova=1]="Cordova",o[o.Incompatible=2]="Incompatible"})(F||(F={}));function $(e){console.log(N.default.red(`Error: ${e}`))}function pe(){return process.env.INIT_CWD}function h(e){let t=(0,y.readFileSync)(e,"utf8");return JSON.parse(t)}function P(e){return new Promise((t,r)=>{(0,R.exec)(e,(o,s,i)=>{o?r(s+i):t(s)})})}function le(e){return e=e.replace(/\//g,"_").replace(/-/g,"_").replace(/@/g,"").replace(/_\w/g,t=>t[1].toUpperCase()),e.charAt(0).toUpperCase()+e.slice(1)}function de(...e){let t=e[0],r=e.slice(1),o,s=[pe()];for(let i of s)if(o=fe(i,t),o)break;return o?(0,l.join)(o,...r):null}function J(e,t){return(0,y.writeFileSync)(e,JSON.stringify(t,null,"  ")+`
`)}function fe(e,t){let r=(0,l.parse)(e).root,o=(0,l.resolve)(e),s;for(;;){if(s=(0,l.join)(o,"node_modules",t),(0,y.existsSync)(s))return s;if(o===r)return null;o=(0,l.dirname)(o)}}async function U(e){try{let t=de(e);if(!t)return console.error(`Unable to find node_modules/${e}. Are you sure ${e} is installed?`),null;let r=(0,l.join)(t,"package.json"),o=await h(r);if(!o)return null;if(o.capacitor)return{id:e,name:le(e),version:o.version,rootPath:t,repository:o.repository,manifest:o.capacitor}}catch(t){return null}}function W(e){var t,r;return((r=(t=e.manifest)==null?void 0:t.electron)==null?void 0:r.src)?(0,l.join)(e.rootPath,e.manifest.electron.src,"dist/plugin.js"):null}async function x(e,t){let r=require("ora"),o=require("chalk"),s=r(e).start();try{let i=process.hrtime(),f,m=await t(u=>f=u),d=process.hrtime(i);return f?s.info(`${e} ${o.dim("\u2013 "+f)}`):s.succeed(`${e} ${o.dim("in "+me(d))}`),m}catch(i){throw s.fail(`${e}: ${i.message?i.message:""}`),s.stop(),i}}var M=["s","ms","\u03BCp"];function me(e){let t=e[0]+e[1]/1e9,r=0;for(;r<M.length-1&&!(t>=1);r++,t*=1e3);return t.toFixed(2)+M[r]}async function q(){let e=process.env.CAPACITOR_ROOT_DIR,t=(0,p.join)(e,"node_modules","@capacitor-community","electron","template"),r=(0,p.join)(e,"electron"),o,s,i={ts:(0,p.join)(e,"capacitor.config.ts"),js:(0,p.join)(e,"capacitor.config.js"),json:(0,p.join)(e,"capacitor.config.json")};(0,v.existsSync)(i.ts)?(o=i.ts,s="capacitor.config.ts"):(0,v.existsSync)(i.js)?(o=i.js,s="capacitor.config.js"):(o=i.json,s="capacitor.config.json");let f=JSON.parse(process.env.CAPACITOR_CONFIG),m=process.env.CAPACITOR_WEB_DIR;if((0,v.existsSync)(r))throw new Error("Electron platform already exists.");{(0,A.copySync)(t,r),(0,A.copySync)(o,(0,p.join)(r,s)),(0,v.renameSync)((0,p.join)(r,"gitignore"),(0,p.join)(r,".gitignore")),(0,A.copySync)(m,(0,p.join)(r,"app"));let d=f.appName,u=h((0,p.join)(r,"package.json")),g=h((0,p.join)(e,"package.json"));u.name=d,g.repository&&(u.repository=g.repository),J((0,p.join)(r,"package.json"),u),await P(`cd ${r} && npm i`)}}var L=a(require("fs")),I=a(require("fs-extra")),B=a(require("path"));async function H(){let e=process.env.CAPACITOR_ROOT_DIR,t=process.env.CAPACITOR_WEB_DIR,r=(0,B.join)(e,"electron","app");try{(0,L.existsSync)(r)&&(0,I.removeSync)(r),(0,I.copySync)(t,r)}catch(o){throw $(o.message),o}}var G=a(require("path"));async function z(){let e=process.env.CAPACITOR_ROOT_DIR,t=(0,G.join)(e,"electron");try{await P(`cd ${t} && npm run electron:start-live`)}catch(r){throw $(r.message),r}}var k=a(require("fs")),K=a(require("fs-extra")),c=a(require("path"));async function Q(){let e=process.env.CAPACITOR_ROOT_DIR,t=await h((0,c.join)(e,"package.json")),r=t.dependencies?t.dependencies:{},o=t.devDependencies?t.devDependencies:{},s=_(_({},r),o),i=await Promise.all(Object.keys(s).map(async n=>U(n)));i=i.filter(n=>!!n);let f=i.map(n=>{let j="";if(s[n==null?void 0:n.id]&&s[n==null?void 0:n.id].startsWith("file:")){let S=s[n==null?void 0:n.id].replace(/^file:/,""),ee=(0,c.isAbsolute)(S)?S:(0,c.resolve)(e,S);j=(0,c.relative)((0,c.join)(e,"electron"),ee)}else j=`${n==null?void 0:n.id}@${n==null?void 0:n.version}`;let X=W(n),Y=n==null?void 0:n.name,Z=n==null?void 0:n.id;return{name:Y,path:X,installStr:j,id:Z}}).filter(n=>n.path!==null),m="",d=`/* eslint-disable @typescript-eslint/no-var-requires */
`;for(let n of f){m+=` ${n.installStr}`;let j=(0,c.join)(e,"electron","node_modules",n.id,"electron","dist/plugin.js");d+=`const ${n.name} = require('${j.replace(/\\/g,"\\\\")}')
`}d+=`
module.exports = {
`;for(let n of f)d+=`  ${n.name},
`;d+="}";let u=(0,c.join)(e,"electron","src","rt");(0,k.writeFileSync)((0,c.join)(u,"electron-plugins.js"),d,{encoding:"utf-8"});let g,O,w={ts:(0,c.join)(e,"capacitor.config.ts"),js:(0,c.join)(e,"capacitor.config.js"),json:(0,c.join)(e,"capacitor.config.json")};(0,k.existsSync)(w.ts)?(g=w.ts,O="capacitor.config.ts"):(0,k.existsSync)(w.js)?(g=w.js,O="capacitor.config.js"):(g=w.json,O="capacitor.config.json"),(0,K.copySync)(g,(0,c.join)(e,"electron",O),{overwrite:!0}),m.length>0&&(console.log(`

Will install:${m}

`),await P(`cd ${(0,c.join)(e,"electron")} && npm i${m}`))}async function T(){return await x("Updating Electron plugins",async()=>await Q())}async function ue(){return await x("Adding Electron platform",async()=>q())}async function V(){return await x("Copying Web App to Electron platform",async()=>await H())}async function ge(){return await x("Opening Electron platform",async()=>await z())}(async()=>{let e=process.argv[2]?process.argv[2]:null;if(e!==null)switch(e){case"add":await ue(),await T();break;case"copy":await V();break;case"run":case"open":await ge();break;case"update":await T();break;case"sync":await V(),await T();break;default:throw new Error(`Invalid script chosen: ${e}`)}else throw new Error(`Invalid script chosen: ${e}`)})();
